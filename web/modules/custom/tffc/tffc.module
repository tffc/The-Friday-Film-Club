<?php

/**
 * @file
 * Contains tffc.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\Node;
use Drupal\tffc\Tffc;

define('TFFC_REPLY_BOT_ID', 2);

/**
 * Implements hook_help().
 *
 * @param $route_name
 * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
 */
function tffc_help($route_name, RouteMatchInterface $route_match) {

}

/**
 * Implements hook_theme().
 */
function tffc_theme() {
  $info['points_countdown'] = [
    'variables' => [
      'total_points' => 0,
      'options' => [
        'realtime' => FALSE,
      ],
    ],
  ];

  return $info;
}

/**
 * hook_comment_presave
 *
 * @param $comment
 */
function tffc_comment_presave(&$comment) {
  $reply_uid = $comment->get('uid')->target_id;

  // we don't want to run a presave if the comment is by the
  // reply bot (no loopy loops)
  if ($reply_uid === TFFC_REPLY_BOT_ID) {
    return;
  }

  // load the current user
  $user = \Drupal::currentUser();

  // will store any penalty scores from previous tries
  $prev_scores = 0;

  // what guess count are we on.
  // start at 1 guess :D
  $guess = 1;

  // load some information from the comments
  $entity_id = $comment->get('entity_id')->target_id;
  $answer = $comment->get('field_answer')->target_id;

  // load the entity it is attached too
  $entity = Node::load($entity_id);

  // get the total score from the question node
  $score = $entity->get('field_total_points')->total ?? 40000;
  // the correct answer target id
  $correct_answer = $entity->get('field_related_film')->target_id ?? -1;
  // the penalty score for an incorrect value
  $penalty = $entity->get('field_penalty')->value ?? -2000;
  // the lowest score you can get
  $end = $entity->get('field_end_points')->value ?? 0;
  // get the time the question was created
  $timestamp = $entity->getCreatedTime();

  // calculate the points val before loading the comments
  $score_val = Tffc::calculatePoints($timestamp, $score, $end);

  // load all the prev comments for this node by this user
  $prev_comments = Tffc::load_comments_by_nid($entity->id(), $user->id());

  // now we have all the comments
  // what we want to do here is go through each comment
  // getting a list of only wrong answers and adding up the incorrect value scores
  if ($prev_comments) {
    foreach ($prev_comments as $prev) {
      if ($prev->get('field_correct')->value !== "1") {
        // add together the prev scores
        $prev_scores += (int) $prev->get('field_score')->value;
      }
      // add up the number of guesses
      // we don't care about right or wrong here
      $guess++;
    }
  }
  // the answer is correct
  // mark it as correct and calculate the score
  if ($answer === $correct_answer) {
    $isCorrect = TRUE;
    // calculating the score by using the time score
    // then making sure the overall score is not less than the end value
    // and not greater than the possible total score
    $new_score = $score_val + $prev_scores;
    $new_score = $new_score <= $end ? $end : $new_score;
    $new_score = $new_score >= $score ? $score : $new_score;
    $score = $new_score;
  }
  else {
    // if it is incorrect
    // mark it as not correct and set the score the penalty value
    $isCorrect = FALSE;
    $score = $penalty;
  }

  // get the question title
  $title = $entity->getTitle();

  // build the comment subject
  $subject = t('@title - @user | Guess: @count', [
    '@title' => $title,
    '@user' => $user->getAccountName(),
    '@count' => $guess,
  ]);

  // update the comment fields
  $comment->setSubject($subject);
  $comment->set('field_score', $score);
  $comment->set('field_correct', $isCorrect);
  $comment->set('field_guess_count', $guess);

}

/**
 * Implements hook_aggregator_fetcher_info_alter().
 *
 * @param \Drupal\Core\Entity\EntityInterface $comment
 */
function tffc_comment_insert(Drupal\Core\Entity\EntityInterface $comment) {
  $reply_uid = $comment->get('uid')->target_id;

  // we don't want to run a insert if the comment is by the
  // reply bot no replying to it self.
  if ($reply_uid === TFFC_REPLY_BOT_ID) {
    return;
  }

  // load some information from the comments
  $entity_id = $comment->get('entity_id')->target_id;
  $isCorrect = $comment->get('field_correct')->value;
  $current_guess = $comment->get('field_guess_count')->value;

  // load the entity it is attached too
  $entity = Node::load($entity_id);

  // get the cid & nid
  $cid = $comment->id();
  $nid = $entity->id();

  // get the related film id
  $related_film = $entity->get('field_related_film')->target_id;

  // load the film
  $film = Node::load($related_film);

  // load the hints
  $hints = $film->get('field_hints')->getValue();

  try {
    Tffc::create_comment_reply($nid, [
      'options' => $hints,
      'count' => $current_guess,
    ], FALSE, $isCorrect);
  } catch (\Drupal\Core\Entity\EntityStorageException $e) {
  }
}

/**
 * Implements hook_form_alter().
 */
function tffc_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ('comment_answers_form' === $form_id) {
    // change the form submit button
    $form['actions']['submit']['#value'] = t('Submit');
    // hide the answer title
    $form['field_answer']['widget'][0]['target_id']['#title_display'] = 'none';
    // set the placeholder to the field_answer's title
    $form['field_answer']['widget'][0]['target_id']['#placeholder'] = $form['field_answer']['widget'][0]['target_id']['#title'];
  }
}

